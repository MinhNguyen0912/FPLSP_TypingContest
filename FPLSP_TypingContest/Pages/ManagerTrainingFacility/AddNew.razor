@page "/TrainingFacilityCreate"
@using FPLSP_TypingContest.Server.BLL.ViewModels.TranningFacility;
@inject FPLSP_TypingContest.Repositories.Interfaces.ITrainingFacilitysRepositories _TrainingFacilitysRepositories;
@inject NavigationManager _navigation;
@using Blazored.Toast
@using Blazored.Toast.Services
@inject IToastService _IToastService
@inject IDialogService _diagService;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations




<MudPopover Style="background-color: rgba(255, 255, 255, 0.8); width: 100vw; height: 100vh; position: fixed;" Open="true">
    <div class="d-flex justify-center align-center w-100" style="margin: 70px"> 
        <MudPaper Class="px-5 pt-5 pb-4 w-50"  Elevation="3">

            @*Tiêu đề*@
            <div class="d-flex align-items-center mb-2">
                <MudText Typo="Typo.h5" Class="mr-auto" Style="font-weight: 500;">Thêm Cơ Sở Đào Tạo</MudText>
                              <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="@OnCloseFormAdd"></MudIconButton>
            </div>
<MudGrid>
    <MudItem xs="10" sm="6">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" @bind-Value = "trainingFacilityVMCreate.Name" Label="Tên" Required="true" RequiredError="Name không được trống!"/>
                    <MudTextField T="string" @bind-Value = "trainingFacilityVMCreate.Email" Label="Email" Required="true" RequiredError="Email không được trống!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                     <MudTextField T="string" @bind-Value = "trainingFacilityVMCreate.Address" Label="Địa Chỉ" Required="true" RequiredError="Address không được trống!"/>
                     <MudTextField T="string" @bind-Value = "trainingFacilityVMCreate.PhoneNumber" Label="SĐT" Required="true" RequiredError="PhoneNumber không được trống!"/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" @onclick ="OnconfirmForm" Class="ml-auto" Style="margin-top:13px">Lưu</MudButton>

            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Kiểm tra Lỗi</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Làm Mới</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Lỗi</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
  </MudPaper>

</div>
<Confirm @ref = "confirmForm" ConfirmationChanged="Create" 
    ConfirmationTitle="Thêm Cơ Sở Đào Tạo"
    ConfirmationMessage="Bạn Có Muốn Thêm Cơ Sở Đào Tạo Này Không?"
></Confirm>

</MudPopover>

@code {

    protected Confirm confirmForm { get; set; }

    [Parameter]
    public EventCallback CreateNew { get; set; }

    public TrainingFacilityCreateVM trainingFacilityVMCreate = new TrainingFacilityCreateVM();
    public List<TrainingFacilityVM> trainingFacilityVM;


    public async Task LoadData()
    {
        trainingFacilityVM = await _TrainingFacilitysRepositories.GetAllActiveAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    protected async Task OnCloseFormAdd()
    {
        await CreateNew.InvokeAsync();
    }
    public void OnconfirmForm()
    {       
        confirmForm.show();
    }

    public async Task Create(bool value)
    {

        if (value)
        {
            trainingFacilityVMCreate.CreateBy = Guid.Parse("3FA85F64-5717-4562-B3FC-2C963F66AFA6");
            bool result = await _TrainingFacilitysRepositories.AddAsync(trainingFacilityVMCreate);
            if (result)
            {
                _IToastService.ShowSuccess("successfully");

            }
            else
            {
                _IToastService.ShowError("Error");
            }
            await LoadData();
            await CreateNew.InvokeAsync();
        }

    }

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}
